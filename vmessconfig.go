package vmessconfig

import (
	"fmt"
	"github.com/v2fly/v2ray-core/v4/infra/conf"
	"github.com/yindaheng98/vmessconfig/util"
	"os"
)

type BaseConfig struct {
	PingConfig *PingConfig `json:"pingConfig"`
}

type SingleNodeConfig struct {
	BaseConfig
	OutboundInsertBeforeTag string `json:"outboundInsertBeforeTag"`
}

func DefaultSingleNodeConfig() *SingleNodeConfig {
	return &SingleNodeConfig{
		BaseConfig:              BaseConfig{PingConfig: DefaultPingConfig()},
		OutboundInsertBeforeTag: "vmessconfig-outbound-insert",
	}
}

type BalancerConfig struct {
	BaseConfig
	OutboundInsertBeforeTag string `json:"outboundInsertBeforeTag"`
	TagFormat               string `json:"tagFormat"`
	BalancerInsertToTag     string `json:"balancerInsertToTag"`
	MaxSelect               uint   `json:"maxSelect"`
}

func DefaultBalancerConfig() *BalancerConfig {
	return &BalancerConfig{
		BaseConfig:              BaseConfig{PingConfig: DefaultPingConfig()},
		OutboundInsertBeforeTag: "vmessconfig-outbound-insert",
		TagFormat:               "vmessconfig-autogenerated-%d",
		BalancerInsertToTag:     "vmessconfig-autogenerated-balancer",
		MaxSelect:               8,
	}
}

func getSortedVmessList(url string, config *PingConfig, stopCh <-chan os.Signal) ([]string, error) {
	vmesslist, err := util.GetVmessList(url)
	if err != nil {
		return nil, err
	}
	vmessstats := VmessPingAll(vmesslist, config, stopCh)
	vmesslist = util.VmessSort(vmessstats)
	return vmesslist, nil
}

func VmessConfigBalancer(url string, template *conf.Config, config *BalancerConfig, stopCh <-chan os.Signal) (*conf.Config, error) {
	vmesslist, err := getSortedVmessList(url, config.PingConfig, stopCh)
	if err != nil {
		return nil, err
	}
	max := int(config.MaxSelect)
	if len(vmesslist) < max {
		max = len(vmesslist)
	}
	outboundDetourConfigs := util.VmessListParse(vmesslist[0:max], config.PingConfig.UseMux, config.PingConfig.AllowInsecure)
	template = util.VmessBalancerConfigMerge(outboundDetourConfigs, template, config.TagFormat, config.OutboundInsertBeforeTag, config.BalancerInsertToTag)
	return template, nil
}

func VmessConfigSingleNode(url string, template *conf.Config, config *SingleNodeConfig, stopCh <-chan os.Signal) (*conf.Config, error) {
	vmesslist, err := getSortedVmessList(url, config.PingConfig, stopCh)
	if err != nil {
		return nil, err
	}
	outboundDetourConfig, err := util.VmessParse(vmesslist[0], config.PingConfig.UseMux, config.PingConfig.AllowInsecure)
	if err != nil {
		return nil, err
	}
	template = util.VmessSingleNodeConfigMerge(outboundDetourConfig, template, config.OutboundInsertBeforeTag)
	return template, nil
}

func VmessConfig(url string, template *conf.Config, config interface{}, stopCh <-chan os.Signal) (*conf.Config, error) {
	var c interface{} = config
	switch inst := c.(type) {
	case *BalancerConfig:
		return VmessConfigBalancer(url, template, inst, stopCh)
	case *SingleNodeConfig:
		return VmessConfigSingleNode(url, template, inst, stopCh)
	default:
		return nil, fmt.Errorf("INVALID CONFIG TYPE: %+v", inst)
	}
}
